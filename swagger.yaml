swagger: "2.0"
info:
  description: "cloudfunctionでフロントからDBを叩くためのAPI"
  version: "1.0.0"
  title: "フロント→バックエンド用リファレンス"

host: "us-central1-pj-marowd.cloudfunctions.net"

tags:
  - name: "関数一覧"
    description: "DBに格納されているデータを取得したり格納したりする関数"
schemes:
  - "https"

paths:
  /comment:
    get:
      tags:
        - "取得"
      summary: "授業ごとのコメントをidを選択して取得する"

      parameters:
        - name: "comment_id"
          in: "query"
          description: ""
          required: true
          type: "integer"
        - name: "class_name"
          in: "query"
          required: true
          type: "string"

      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/comment'
        404:
          description: ""
          schema:
            $ref: '#/definitions/not_found_error'
    post:
      tags:
        - "投稿"
      summary: "コメントを新規に投稿する"
      parameters:
        - in: body
          name: "data"
          required: true
          schema:
              $ref: '#/definitions/comment'

      description: ""
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/pass'

        404:
          description: ""
          schema:
            $ref: '#/definitions/not_found_error'

    delete:
      tags:
        - "削除"
      summary: "コメントを削除する"
      description: ""
      parameters:

        - name: "uid"
          in: "query"
          required: true
          type: "string"

      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/pass'
        500:
          description: ""
          schema:
            $ref: '#/definitions/other_error'

  /class_data:
    get:
      tags:
        - "取得"
      summary: "授業データを取得する"
      parameters:

        - name: "class_name"
          in: "query"
          required: true
          type: "string"

      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/class'
        404:
          description: ""
          schema:
            $ref: '#/definitions/not_found_error'
    post:
      tags:
        - "投稿"
      summary: "授業を新規に投稿する"
      parameters:
        - name: "data"
          in: body
          required: true
          schema:
            $ref: '#/definitions/class'
      description: ""
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/pass'

        404:
          description: ""
          schema:
            $ref: '#/definitions/not_found_error'

  /comments:
    get:
      tags:
        - "取得"
      summary: "コメントを一括取得する"
      parameters:
        - name: "class_name"
          in: "query"
          required: true
          type: "string"

      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/comments'
        404:
          description: ""
          schema:
            $ref: '#/definitions/not_found_error'

  /exist_class:
    get:
      tags:
        - "取得"
      summary: "授業データがすでに存在しているかを確認する"
      parameters:

        - name: "class_name"
          in: "query"
          required: true
          type: "string"

      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/pass'

        400:
          description: ""
          schema:
            $ref: '#/definitions/wrong_error'

        404:
          description: ""
          schema:
            $ref: '#/definitions/not_found_error'




definitions:
  pass:
    type: "object"
    properties:
      status:
        type: "string"
        example: "OK"

  wrong_error:
    type: "object"
    properties:
      message:
        type: "string"
        example: "data is wrong"

  not_found_error:
    type: "object"
    properties:
      message:
        type: "string"
        example: "Data not found or argument error"

  other_error:
    type: "object"
    properties:
      message:
        type: "string"
        example: "An error occurred"

  class:
    type: "object"
    required:
      - name
      - title
      - faculty
      - department
      - fav_amount
      - grade
      - professor
      - is_random
      - rating
      - term
      - update_by
      - made_by

    properties:
      name:
        type: "string"
      title:
        type: "string"
      faculty:
        type: "string"
      fav_amount:
        type: "number"
      grade:
        type: "string"
      professor:
        type: "string"
      is_random:
        type: "boolean"
      rating:
        type: "number"
        example: "2.7"
      term:
        type: "string"
      update_by:
        type: "string"
      made_by:
        type: "string"

  comments:
    type: "array"
    items:
      $ref: '#/definitions/comment'

  comment:
    type: "object"
    required:
      - name
      - title
      - comment
      - made_by
      - image
      - is_recommend

    properties:
      name:
        type: "string"
      title:
        type: "string"
#        example: "おすすめ"
      image:
        type: "string"
#        example: "絶対に授業を取るべきです"
      made_by:
        type: "string"
      subject:
        type: "string"
      comment:
        type: "string"
      is_recommend:
        type: "boolean"

