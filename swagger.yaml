swagger: "2.0"
info:
  description: "cloudfunctionでフロントからDBを叩くためのAPI"
  version: "1.0.0"
  title: "フロント⇆バックエンド用リファレンス"

host: "us-central1-pj-marowd.cloudfunctions.net"
basePath: "/api"

schemes:
  - "https"
paths:
  /comment:
    get:
      summary: "授業のコメントをコメントidから取得する、コメントidが指定されなかった場合はその授業のコメント全て取得する。
      commentのパラメータ comment_uidについて。　uidはバックエンドで管理するため、なんらかの値が設定されていたら自分のコメントを持ってくるように処理を書きました。
      (値がセットされていない場合は全件のコメントを返す)"
      security:
        - firebaseAuth: []
      parameters:
        - name: "comment_id"
          in: "query"
          type: "integer"
        - name: "class_name"
          in: "query"
          type: "string"
      responses:
        200:
          description: "正常の場合、コメントを取得する。"
          schema:
            type: 'array'
            items:
              $ref: '#/definitions/comment'
        404:
          description: "Not Found"
        500:
          description: "Internal Server Error"
    post:
      summary: "コメントを新規に投稿する"
      description: "授業に対してコメントを追加する。"
      security:
        - firebaseAuth: []
      parameters:
        - name: "class_name"
          in: "query"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          required: true
          schema:
              $ref: '#/definitions/comment'
      responses:
        204:
          description: "No Content"
        404:
          description: "Not Found"
        500:
          description: "Internal Server Error"
    delete:
      summary: "コメントを削除する"
      description: "授業名とヘッダーに含まれた情報を使用して授業情報の削除をする。"
      security:
        - firebaseAuth: []
      parameters:
        - name: "class_name"
          in: "query"
          required: true
          type: "string"
      responses:
        204:
          description: "No Content"
        500:
          description: "Internal Server Error"
  /class_data:
    get:
      summary: "授業データを取得する、授業名が指定された場合、その授業のデータを取得する。"
      security:
        - firebaseAuth: []
      parameters:
        - name: "class_name"
          in: "query"
          type: "string"
        - name: "faculty"
          in: "query"
          type: "string"
        - name: "department"
          in: "query"
          type: "string"
        - name: "grade"
          in: "query"
          type: "string"
        - name: "professor"
          in: "query"
          type: "string"
        - name: "term"
          in: "query"
          type: "string"
      responses:
        200:
          description: "授業のデータを取得する"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/class'
        404:
          description: "Not Found"
        500:
          description: "Internal Server Error"
    post:
      summary: "授業を新規に投稿する"
      security:
        - firebaseAuth: []
      parameters:
        - name: "data"
          in: body
          required: true
          schema:
            $ref: '#/definitions/class'
      description: ""
      responses:
        204:
          description: "No Content"
        404:
          description: "Not Found"
        500:
          description: "Internal Server Error"
definitions:
  class:
    type: "object"
    required:
      - name
      - faculty
      - department
      - fav_amount
      - grade
      - professor
      - is_random
      - rating
      - term
      - edited_by
    properties:
      name:
        type: "string"
      faculty:
        type: "string"
      fav_amount:
        type: "number"
      department:
        type: "string"
      grade:
        type: "string"
      professor:
        type: "string"
      is_random:
        type: "boolean"
      rating:
        type: "number"
        example: "2.7"
      term:
        type: "string"
      edited_by:
        type: "string"
  comment:
    type: "object"
    required:
      - name
      - title
      - comment
      - edited_by
      - image
      - is_recommend
    properties:
      name:
        type: "string"
        example:
          "dummy class1"
      title:
        type: "string"
        example:
          "You should take this class!!"
      image:
        type: "string"
      edited_by:
        type: "string"
      comment:
        type: "string"
      is_recommend:
        type: "boolean"
securityDefinitions:
  firebaseAuth:
    type: "apiKey"
    in: "header"
    name: "Authorization"

